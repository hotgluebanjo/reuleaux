// https://github.com/hotgluebanjo
//
// Matches saturation `y` to `z` at provided hue center `x`.
// `y` and `z` values must be in domain 0-1.
//
// The labels don't make sense, but this is the cleanest layout.
// Custom types won't work here. Check the DCTL for a better
// implementation.

#define N_POINTS 9

inline float spow(float x, float p) {
    if (x < 0.0f) {
        return -pow(-x, p);
    }
    return pow(x, p);
}

inline float lerp(float a, float b, float t) {
    return (1.0f - t) * a + t * b;
}

float interp_linear(float2 *pts, int n_pts, float x) {
    if (x <= pts[0].x) {
        return pts[0].y;
    }

    if (x >= pts[n_pts - 1].x) {
        return pts[n_pts - 1].y;
    }

    int i = 0;
    int upper = n_pts - 1;
    while (i != upper - 1) {
        int m = i + (upper - i) / 2;
        if (x >= pts[m].x) {
            i = m;
        } else {
            upper = m;
        }
    }

    float t = (x - pts[i].x) / (pts[i + 1].x - pts[i].x);
    return lerp(pts[i].y, pts[i + 1].y, t);
}

kernel SaturationAtHueAuto : ImageComputationKernel<ePixelWise> {
    Image<eRead, eAccessPoint, eEdgeClamped> src;
    Image<eWrite> dst;

    param:
        float3 red;
        float3 yel;
        float3 grn;
        float3 cyn;
        float3 blu;
        float3 mag;
        bool invert;

    local:
        float3 params_list[6];
        float2 curve[N_POINTS];

    void define() {
        defineParam(red, "Red", float3(0.0f, 0.5f, 0.5f));
        defineParam(yel, "Yellow", float3(1.0f / 6.0f, 0.5f, 0.5f));
        defineParam(grn, "Green", float3(2.0f / 6.0f, 0.5f, 0.5f));
        defineParam(cyn, "Cyan", float3(3.0f / 6.0f, 0.5f, 0.5f));
        defineParam(blu, "Blue", float3(4.0f / 6.0f, 0.5f, 0.5f));
        defineParam(mag, "Magenta", float3(5.0f / 6.0f, 0.5f, 0.5f));
        defineParam(invert, "Invert", false);
    }

    void init() {
        params_list[0] = red;
        params_list[1] = yel;
        params_list[2] = grn;
        params_list[3] = cyn;
        params_list[4] = blu;
        params_list[5] = mag;

        for (int i = 1; i < N_POINTS - 2; i += 1) {
            int j = i - 1;
            curve[i].x = params_list[j].x;

            if (0.0f < params_list[j].y && params_list[j].y < 1.0f &&
                0.0f < params_list[j].z && params_list[j].z < 1.0f)
            {
                curve[i].y = log(params_list[j].y) / log(params_list[j].z);
            } else {
                curve[i].y = 1.0f;
            }
        }

        if (curve[1].x > 0.5f) {
            curve[1] = float2(curve[1].x - 1.0f, curve[1].y);
            curve[7] = curve[1];
        } else {
            curve[1] = curve[1];
            curve[7] = float2(curve[1].x + 1.0f, curve[1].y);
        }

        curve[0] = float2(curve[6].x - 1.0f, curve[6].y);
        curve[8] = float2(curve[2].x + 1.0f, curve[2].y);
    }

    void process() {
        SampleType(src) input = src();

        float hue = input.x;
        float sat = input.y;

        float hue_adj = interp_linear(curve, N_POINTS, hue);
        float result = spow(sat, invert ? hue_adj : 1.0f / hue_adj);

        dst() = float4(input.x, result, input.z, input.w);
    }
};
