// https://github.com/hotgluebanjo

#define N_POINTS 9

inline float spow(float x, float p) {
    if (x < 0.0f) {
        return -pow(-x, p);
    }
    return pow(x, p);
}

inline float lerp(float a, float b, float t) {
    return (1.0f - t) * a + t * b;
}

float interp_linear(float2 *pts, int n_pts, float x) {
    if (x <= pts[0].x) {
        return pts[0].y;
    }

    if (x >= pts[n_pts - 1].x) {
        return pts[n_pts - 1].y;
    }

    int i = 0;
    int upper = n_pts - 1;
    while (i != upper - 1) {
        int m = i + (upper - i) / 2;
        if (x >= pts[m].x) {
            i = m;
        } else {
            upper = m;
        }
    }

    float t = (x - pts[i].x) / (pts[i + 1].x - pts[i].x);
    return lerp(pts[i].y, pts[i + 1].y, t);
}

kernel SaturationAtHue : ImageComputationKernel<ePixelWise> {
    Image<eRead, eAccessPoint, eEdgeClamped> src;
    Image<eWrite> dst;

    param:
        float2 red;
        float2 yel;
        float2 grn;
        float2 cyn;
        float2 blu;
        float2 mag;
        bool invert;

    local:
        float2 curve[N_POINTS];

    void define() {
        defineParam(red, "Red", float2(0.0f, 1.0f));
        defineParam(yel, "Yellow", float2(1.0f / 6.0f, 1.0f));
        defineParam(grn, "Green", float2(2.0f / 6.0f, 1.0f));
        defineParam(cyn, "Cyan", float2(3.0f / 6.0f, 1.0f));
        defineParam(blu, "Blue", float2(4.0f / 6.0f, 1.0f));
        defineParam(mag, "Magenta", float2(5.0f / 6.0f, 1.0f));
        defineParam(invert, "Invert", false);
    }

    void init() {
        if (red.x > 0.5f) {
            curve[1] = float2(red.x - 1.0f, red.y);
            curve[7] = red;
        } else {
            curve[1] = red;
            curve[7] = float2(red.x + 1.0f, red.y);
        }

        curve[0] = float2(mag.x - 1.0f, mag.y);
        curve[8] = float2(yel.x + 1.0f, yel.y);

        curve[2] = yel;
        curve[3] = grn;
        curve[4] = cyn;
        curve[5] = blu;
        curve[6] = mag;
    }

    void process() {
        SampleType(src) input = src();

        float hue = input.x;
        float sat = input.y;

        // This, along with ValueAtHue could be summed gaussians
        // and still be invertible, since it's not the curve that's
        // inverted, just the factor scaling.
        //
        // Sticking with linear interpolation for accuracy.
        float hue_adj = interp_linear(curve, N_POINTS, hue);

        float result = spow(sat, invert ? hue_adj : 1.0f / hue_adj);

        dst() = float4(input.x, result, input.z, input.w);
    }
};
