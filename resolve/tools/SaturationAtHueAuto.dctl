// https://github.com/hotgluebanjo
//
// Matches saturation `x` to `y` at provided hue center.
// `x` and `y` values must be in domain 0-1.

#define N_POINTS 9

DEFINE_UI_PARAMS(RED_HUE, Red Hue Center, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(RED_X, Red Saturation x, DCTLUI_VALUE_BOX, 0.5)
DEFINE_UI_PARAMS(RED_Y, Red Saturation y, DCTLUI_VALUE_BOX, 0.5)

DEFINE_UI_PARAMS(YEL_HUE, Yellow Hue Center, DCTLUI_VALUE_BOX, 0.166666)
DEFINE_UI_PARAMS(YEL_X, Yellow Saturation x, DCTLUI_VALUE_BOX, 0.5)
DEFINE_UI_PARAMS(YEL_Y, Yellow Saturation y, DCTLUI_VALUE_BOX, 0.5)

DEFINE_UI_PARAMS(GRN_HUE, Green Hue Center, DCTLUI_VALUE_BOX, 0.333333)
DEFINE_UI_PARAMS(GRN_X, Green Saturation x, DCTLUI_VALUE_BOX, 0.5)
DEFINE_UI_PARAMS(GRN_Y, Green Saturation y, DCTLUI_VALUE_BOX, 0.5)

DEFINE_UI_PARAMS(CYN_HUE, Cyan Hue Center, DCTLUI_VALUE_BOX, 0.5)
DEFINE_UI_PARAMS(CYN_X, Cyan Saturation x, DCTLUI_VALUE_BOX, 0.5)
DEFINE_UI_PARAMS(CYN_Y, Cyan Saturation y, DCTLUI_VALUE_BOX, 0.5)

DEFINE_UI_PARAMS(BLU_HUE, Blue Hue Center, DCTLUI_VALUE_BOX, 0.666666)
DEFINE_UI_PARAMS(BLU_X, Blue Saturation x, DCTLUI_VALUE_BOX, 0.5)
DEFINE_UI_PARAMS(BLU_Y, Blue Saturation y, DCTLUI_VALUE_BOX, 0.5)

DEFINE_UI_PARAMS(MAG_HUE, Magenta Hue Center, DCTLUI_VALUE_BOX, 0.833333)
DEFINE_UI_PARAMS(MAG_X, Magenta Saturation x, DCTLUI_VALUE_BOX, 0.5)
DEFINE_UI_PARAMS(MAG_Y, Magenta Saturation y, DCTLUI_VALUE_BOX, 0.5)

DEFINE_UI_PARAMS(INVERT, Invert, DCTLUI_CHECK_BOX, 0)

typedef struct {
    float hue_center;
    float2 point;
} AutoPoint;

__DEVICE__ inline float spow(float x, float p) {
    if (x < 0.0f) {
        return -_powf(-x, p);
    }
    return _powf(x, p);
}

__DEVICE__ float interp_linear(__PRIVATE__ float2 *pts, int n_pts, float x) {
    if (x <= pts[0].x) {
        return pts[0].y;
    }

    if (x >= pts[n_pts - 1].x) {
        return pts[n_pts - 1].y;
    }

    int i = 0;
    int upper = n_pts - 1;
    while (i != upper - 1) {
        int m = i + (upper - i) / 2;
        if (x >= pts[m].x) {
            i = m;
        } else {
            upper = m;
        }
    }

    float t = (x - pts[i].x) / (pts[i + 1].x - pts[i].x);
    return _mix(pts[i].y, pts[i + 1].y, t);
}

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B) {
    AutoPoint params_list[6] = {
        {RED_HUE, {RED_X, RED_Y}},
        {YEL_HUE, {YEL_X, YEL_Y}},
        {GRN_HUE, {GRN_X, GRN_Y}},
        {CYN_HUE, {CYN_X, CYN_Y}},
        {BLU_HUE, {BLU_X, BLU_Y}},
        {MAG_HUE, {MAG_X, MAG_Y}},
    };

    float2 curve[N_POINTS];

    for (int i = 1; i < N_POINTS - 2; i += 1) {
        int j = i - 1;
        curve[i].x = params_list[j].hue_center;

        if (0.0f < params_list[j].point.x && params_list[j].point.x < 1.0f &&
            0.0f < params_list[j].point.y && params_list[j].point.y < 1.0f)
        {
            curve[i].y = _logf(params_list[j].point.x) / _logf(params_list[j].point.y);
        } else {
            curve[i].y = 1.0f;
        }
    }

    if (curve[1].x > 0.5f) {
        curve[1] = make_float2(curve[1].x - 1.0f, curve[1].y);
        curve[7] = curve[1];
    } else {
        curve[1] = curve[1];
        curve[7] = make_float2(curve[1].x + 1.0f, curve[1].y);
    }

    curve[0] = make_float2(curve[6].x - 1.0f, curve[6].y);
    curve[8] = make_float2(curve[2].x + 1.0f, curve[2].y);

    float hue = p_R;
    float sat = p_G;

    float hue_adj = interp_linear(curve, N_POINTS, hue);
    float result = spow(sat, INVERT ? hue_adj : 1.0f / hue_adj);

    return make_float3(p_R, result, p_B);
}
